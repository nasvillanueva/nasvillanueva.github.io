import{S as za,i as Za,s as Fa,k as l,q as n,a as m,l as p,m as r,r as o,h as s,c as f,n as v,b as i,G as e,K as Ta}from"./index.06f43c05.js";function Ja($a){let c,J,D,Q,aa,O,sa,ea,j,k,ta,w,na,oa,_,la,pa,Y,d,ra,L,ia,ca,$,g,Ua='<code class="language-bash"><span class="token assign-left variable">KERNEL</span><span class="token operator">==</span><span class="token string">"card0"</span>, <span class="token assign-left variable">SUBSYSTEM</span><span class="token operator">==</span><span class="token string">"drm"</span>, ENV<span class="token punctuation">&#123;</span><span class="token environment constant">DISPLAY</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">":0"</span>, ENV<span class="token punctuation">&#123;</span><span class="token environment constant">XAUTHORITY</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"/home/jvillanueva/.Xauthority"</span>, <span class="token assign-left variable">RUN</span><span class="token operator">+=</span><span class="token string">"/home/jvillanueva/.bin/hotplug.sh"</span></code>',U,h,ua,R,ma,fa,X,x,Xa=`<code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">DISPLAY</span></span><span class="token operator">=</span>:0
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XAUTHORITY</span></span><span class="token operator">=</span>/home/jvillanueva/.Xauthority
<span class="token assign-left variable">MONITOR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>xrandr <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">" connected"</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$MONITOR</span> <span class="token parameter variable">-eq</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    xrandr <span class="token parameter variable">--output</span> eDP1 <span class="token parameter variable">--auto</span>
<span class="token keyword">else</span>
    xrandr <span class="token parameter variable">--output</span> eDP1 <span class="token parameter variable">--auto</span> <span class="token parameter variable">--output</span> HDMI1 --right-of eDP1 <span class="token parameter variable">--auto</span>
<span class="token keyword">fi</span>

<span class="token function">sleep</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> /home/jvillanueva/.bin/wall-e <span class="token operator">&amp;</span></code>`,q,b,ka,H,va,da,W,I,qa=`<code class="language-bash">udevadm control --reload-rules
systemctl restart systemd-udevd</code>`,B,u,ha,N,ba,ya,M,Ea,wa,P,C,_a,ga,G,y,xa,S,Ia,Pa,K,T,Wa=`<code class="language-bash"><span class="token shebang important">#!/bin/sh</span>

<span class="token builtin class-name">.</span> /home/jvillanueva/.zshenv
<span class="token assign-left variable">WALL</span><span class="token operator">=</span><span class="token variable">$WALLPAPER_PATH</span>
<span class="token assign-left variable">GRAY_TINT</span><span class="token operator">=</span><span class="token string">'#c7c7c7'</span>
<span class="token assign-left variable">RED_TINT</span><span class="token operator">=</span><span class="token string">'#947575'</span>
hsetroot <span class="token parameter variable">-screens</span> <span class="token number">3</span> <span class="token parameter variable">-fill</span> <span class="token variable">$WALL</span> <span class="token parameter variable">-tint</span> <span class="token variable">$RED_TINT</span> <span class="token operator">&amp;</span></code>`;return{c(){c=l("p"),J=n("I finally managed to write a "),D=l("code"),Q=n("udev"),aa=n(" rule that executes my "),O=l("code"),sa=n("xrandr"),ea=n(` script
when plugging an external monitor for my work laptop. I’ve tried to write
this script so many times before, but failed to make it work. I’m not sure
if it’s because my setup at the time supported it very well, or if I
just wasn’t motivated enough to make it work.`),j=m(),k=l("p"),ta=n("After listening to the "),w=l("a"),na=n("Nixers"),oa=m(),_=l("a"),la=n("Podcast"),pa=n(`, for
some unknown reason, I was motivated to write one that actually works.`),Y=m(),d=l("p"),ra=n("Here’s my "),L=l("code"),ia=n("/etc/udev/rules.d/99-monitor-hotplug.rules"),ca=n(":"),$=m(),g=l("pre"),U=m(),h=l("p"),ua=n("and here’s my "),R=l("code"),ma=n("hotplug.sh"),fa=n(":"),X=m(),x=l("pre"),q=m(),b=l("p"),ka=n("After putting everything in place, I reloaded "),H=l("code"),va=n("udev"),da=n(` rules and services
via:`),W=m(),I=l("pre"),B=m(),u=l("p"),ha=n("Then I tried connecting my external monitor and boom, "),N=l("code"),ba=n("udev"),ya=n(" executed "),M=l("code"),Ea=n("hotplug.sh"),wa=n(`.
Now, all of my monitors are automatically configured everytime I [un]plug my external
monitor. My script also calls another script that [re]sets my wallpaper
using `),P=l("a"),C=l("code"),_a=n("hsetroot"),ga=n("."),G=m(),y=l("p"),xa=n("Here’s my "),S=l("code"),Ia=n("wall-e"),Pa=n(" script:"),K=m(),T=l("pre"),this.h()},l(a){c=p(a,"P",{});var t=r(c);J=o(t,"I finally managed to write a "),D=p(t,"CODE",{});var Aa=r(D);Q=o(Aa,"udev"),Aa.forEach(s),aa=o(t," rule that executes my "),O=p(t,"CODE",{});var Da=r(O);sa=o(Da,"xrandr"),Da.forEach(s),ea=o(t,` script
when plugging an external monitor for my work laptop. I’ve tried to write
this script so many times before, but failed to make it work. I’m not sure
if it’s because my setup at the time supported it very well, or if I
just wasn’t motivated enough to make it work.`),t.forEach(s),j=f(a),k=p(a,"P",{});var A=r(k);ta=o(A,"After listening to the "),w=p(A,"A",{href:!0,rel:!0});var Oa=r(w);na=o(Oa,"Nixers"),Oa.forEach(s),oa=f(A),_=p(A,"A",{href:!0,rel:!0});var La=r(_);la=o(La,"Podcast"),La.forEach(s),pa=o(A,`, for
some unknown reason, I was motivated to write one that actually works.`),A.forEach(s),Y=f(a),d=p(a,"P",{});var V=r(d);ra=o(V,"Here’s my "),L=p(V,"CODE",{});var Ra=r(L);ia=o(Ra,"/etc/udev/rules.d/99-monitor-hotplug.rules"),Ra.forEach(s),ca=o(V,":"),V.forEach(s),$=f(a),g=p(a,"PRE",{class:!0});var Ba=r(g);Ba.forEach(s),U=f(a),h=p(a,"P",{});var z=r(h);ua=o(z,"and here’s my "),R=p(z,"CODE",{});var Ha=r(R);ma=o(Ha,"hotplug.sh"),Ha.forEach(s),fa=o(z,":"),z.forEach(s),X=f(a),x=p(a,"PRE",{class:!0});var Ga=r(x);Ga.forEach(s),q=f(a),b=p(a,"P",{});var Z=r(b);ka=o(Z,"After putting everything in place, I reloaded "),H=p(Z,"CODE",{});var Na=r(H);va=o(Na,"udev"),Na.forEach(s),da=o(Z,` rules and services
via:`),Z.forEach(s),W=f(a),I=p(a,"PRE",{class:!0});var Ka=r(I);Ka.forEach(s),B=f(a),u=p(a,"P",{});var E=r(u);ha=o(E,"Then I tried connecting my external monitor and boom, "),N=p(E,"CODE",{});var Ma=r(N);ba=o(Ma,"udev"),Ma.forEach(s),ya=o(E," executed "),M=p(E,"CODE",{});var Ca=r(M);Ea=o(Ca,"hotplug.sh"),Ca.forEach(s),wa=o(E,`.
Now, all of my monitors are automatically configured everytime I [un]plug my external
monitor. My script also calls another script that [re]sets my wallpaper
using `),P=p(E,"A",{href:!0,rel:!0});var Sa=r(P);C=p(Sa,"CODE",{});var ja=r(C);_a=o(ja,"hsetroot"),ja.forEach(s),Sa.forEach(s),ga=o(E,"."),E.forEach(s),G=f(a),y=p(a,"P",{});var F=r(y);xa=o(F,"Here’s my "),S=p(F,"CODE",{});var Ya=r(S);Ia=o(Ya,"wall-e"),Ya.forEach(s),Pa=o(F," script:"),F.forEach(s),K=f(a),T=p(a,"PRE",{class:!0});var Va=r(T);Va.forEach(s),this.h()},h(){v(w,"href","https://nixers.net"),v(w,"rel","nofollow"),v(_,"href","https://podcast.nixers.net/feed"),v(_,"rel","nofollow"),v(g,"class","language-bash"),v(x,"class","language-bash"),v(I,"class","language-bash"),v(P,"href","https://github.com/nasvillanueva/hsetroot"),v(P,"rel","nofollow"),v(T,"class","language-bash")},m(a,t){i(a,c,t),e(c,J),e(c,D),e(D,Q),e(c,aa),e(c,O),e(O,sa),e(c,ea),i(a,j,t),i(a,k,t),e(k,ta),e(k,w),e(w,na),e(k,oa),e(k,_),e(_,la),e(k,pa),i(a,Y,t),i(a,d,t),e(d,ra),e(d,L),e(L,ia),e(d,ca),i(a,$,t),i(a,g,t),g.innerHTML=Ua,i(a,U,t),i(a,h,t),e(h,ua),e(h,R),e(R,ma),e(h,fa),i(a,X,t),i(a,x,t),x.innerHTML=Xa,i(a,q,t),i(a,b,t),e(b,ka),e(b,H),e(H,va),e(b,da),i(a,W,t),i(a,I,t),I.innerHTML=qa,i(a,B,t),i(a,u,t),e(u,ha),e(u,N),e(N,ba),e(u,ya),e(u,M),e(M,Ea),e(u,wa),e(u,P),e(P,C),e(C,_a),e(u,ga),i(a,G,t),i(a,y,t),e(y,xa),e(y,S),e(S,Ia),e(y,Pa),i(a,K,t),i(a,T,t),T.innerHTML=Wa},p:Ta,i:Ta,o:Ta,d(a){a&&s(c),a&&s(j),a&&s(k),a&&s(Y),a&&s(d),a&&s($),a&&s(g),a&&s(U),a&&s(h),a&&s(X),a&&s(x),a&&s(q),a&&s(b),a&&s(W),a&&s(I),a&&s(B),a&&s(u),a&&s(G),a&&s(y),a&&s(K),a&&s(T)}}}const as={title:"Monitor Hotplug for Linux",date:"2017-06-12T15:05:00Z",tags:["Scripts","Bash","Shell"]};class ss extends za{constructor(c){super(),Za(this,c,null,Ja,Fa,{})}}export{ss as default,as as metadata};
