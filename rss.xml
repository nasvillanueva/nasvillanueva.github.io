<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[nandemonas]]></title><description><![CDATA[Personal blog of Nas Villanueva]]></description><link>https://www.nasvillanueva.com</link><generator>RSS for Node</generator><lastBuildDate>Tue, 16 Oct 2018 03:16:16 GMT</lastBuildDate><item><title><![CDATA[gifify.sh — Convert Videos to GIFs]]></title><description><![CDATA[
At work, we use a service called Assembla, a service like Github. Sometimes, to make our tickets more understandable, we include screenshots or screencasts. But the problem is, on Assembla, they don't have an embedded video player
for the screencast we upload, even when it's in a web compatible format. So I created this script.

]]></description><link>https://www.nasvillanueva.com/gifify/</link><guid isPermaLink="false">https://www.nasvillanueva.com/gifify/</guid><pubDate>Mon, 15 Oct 2018 06:34:39 GMT</pubDate><content:encoded>&lt;p&gt;At work, we use a service called Assembla, a service like Github. Sometimes, to make our tickets more understandable, we include screenshots or screencasts. But the problem is, on Assembla, they don’t have an embedded video player
for the screencast we upload, even when it’s in a web compatible format. So I created this script.&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;h1&gt;The Script (not the band)&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gifify.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

TEMP_DIR&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;mktemp -d $TMPDIR/gifify.$RANDOM&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

ffmpeg -i &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; -r 5 &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;/frames-%03d.jpg&quot;&lt;/span&gt;

FILENAME&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;basename&lt;/span&gt; $1&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

convert -delay 20 -loop 0 &lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;/frames-*.jpg &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${FILENAME%%.*}&lt;/span&gt;.gif&quot;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf &lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before being able to run this script, you’d have to have these tools installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ffmpeg.org&quot;&gt;ffmpeg&lt;/a&gt; - for slicing your video into images; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; - for combining your slices of images into a GIF.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Let’s dissect &lt;code class=&quot;language-text&quot;&gt;line 5&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg                      &lt;span class=&quot;token comment&quot;&gt;# Call ffmpeg.&lt;/span&gt;
    -i &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;# Pass script first argumen as input file.&lt;/span&gt;
    -r 5                    &lt;span class=&quot;token comment&quot;&gt;# Set framerate to 5.&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;/frames-%03d.jpg&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# Tell ffmpeg where to put the slices,&lt;/span&gt;
                            &lt;span class=&quot;token comment&quot;&gt;# with a filename template.&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;And &lt;code class=&quot;language-text&quot;&gt;line 9&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;convert                     &lt;span class=&quot;token comment&quot;&gt;# Call ImageMagick convert.&lt;/span&gt;
    -delay 20               &lt;span class=&quot;token comment&quot;&gt;# Delay before the next image shows&lt;/span&gt;
    -loop 0                 &lt;span class=&quot;token comment&quot;&gt;# Set loop to infinite&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;/frames-*.jpg  &lt;span class=&quot;token comment&quot;&gt;# Tell ImageMagick where the slices are.&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${FILENAME%%.*}&lt;/span&gt;.gif&quot;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;# Tell ImageMagick the output filename,&lt;/span&gt;
                            &lt;span class=&quot;token comment&quot;&gt;# replacing the original extension to .gif&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;I am, by no means, an advanced user of ffmpeg nor ImageMagick, that’s why I only used minimal options for each tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Running the script&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gifify.sh ./sample.mov&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will produce a GIF file with the same filename as the input.&lt;/p&gt;
&lt;h1&gt;Demo&lt;/h1&gt;
&lt;p&gt;Here’s a screencast I recorded using Quicktime. &lt;code class=&quot;language-text&quot;&gt;sample.mov&lt;/code&gt;&lt;/p&gt;
&lt;video width=&quot;100%&quot; height=&quot;auto&quot; controls&gt;
    &lt;source src=&quot;/sample-49d931fb81bdacb2c6e2dd5744e5f3ea.mov&quot;&gt;
    Your browser does not support the video tag.
&lt;/video&gt;
&lt;br&gt;
&lt;p&gt;Here’s a &lt;em&gt;gifified&lt;/em&gt; file. &lt;code class=&quot;language-text&quot;&gt;sample.gif&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sample-9ffcc51955357da363364e414f6f112c.gif&quot; alt=&quot;sample.gif&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Now, it’s easier to embed a screencastª, albeit fake, on Assembla (or even Github, GitLab, etc.)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Migrating Docker Images]]></title><description><![CDATA[
Do you run your own Docker Registry server? Ever got tired of tagging
all your images with the registry URL and pushing them one by one? Well,
we do and it is very exhausting when you keep doing it again and again. So
I came up with this script.

]]></description><link>https://www.nasvillanueva.com/migrating-docker-images/</link><guid isPermaLink="false">https://www.nasvillanueva.com/migrating-docker-images/</guid><pubDate>Fri, 11 Aug 2017 12:55:00 GMT</pubDate><content:encoded>&lt;p&gt;Do you run your own Docker Registry server? Ever got tired of tagging
all your images with the registry URL and pushing them one by one? Well,
we do and it is very exhausting when you keep doing it again and again. So
I came up with this script.&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I was at a different company when I created this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;We’re developing an enterprise software for a client with a microservices
architecture that utilizes &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; containers and &lt;a href=&quot;https://dcos.io/&quot;&gt;DC/OS&lt;/a&gt;
orchestration.&lt;/p&gt;
&lt;h3&gt;Our Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dozens of microservices built with &lt;a href=&quot;https://spring.io/&quot;&gt;Spring Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microservices runs on &lt;a href=&quot;https://dcos.io/&quot;&gt;DC/OS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Few environments (development, staging, production) each having their
own registry.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the things you might ask me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Why the f*** do you have more than one registry?”&lt;/em&gt;&lt;/strong&gt;
Production was intended to have its own registry since it doesn’t have
any access to the internet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Why not use a third party private docker registry?”&lt;/em&gt;&lt;/strong&gt;
Production servers doesn’t have any internet access (most of the app
is meant to be access via VPN)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Why not use &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; or some other in-premise CI/CD that
can automatically tag and push your images to your different
envirnments?”&lt;/em&gt;&lt;/strong&gt;
Actually, I’m not so sure because I’ve heard other companies use CI/CD
from development -&gt; production. Maybe the client doesn’t want CI/CD in
the production environment. I really don’t have any idea regarding this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;It is a pain in the arse when you need to manually tag and push all your
images from one registry to another, whether it may come from your local
machine or one of your registry servers.&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;I’ve written a &lt;a href=&quot;https://github.com/nasvillanueva/scripts/blob/master/transfer_images.sh&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;transfer_images.sh&lt;/code&gt;&lt;/a&gt; found on my
&lt;a href=&quot;https://github.com/nasvillanueva/scripts&quot;&gt;scripts repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt; ./transfer_images.sh &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-s source&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; -d destination -m matcher&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;,matcher2,matcher3&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-p&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 where:
    -h print usage
    -s &lt;span class=&quot;token function&quot;&gt;source&lt;/span&gt; registry &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;optional&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        example: registry.hub.docker.com
    -d destination registry &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        example: registry.mydomain.com
    -m matchers &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        all the images that will be tagged with the destination
        example nodejs,jenkins,chronos
    -p push images &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;optional&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        push all tagged images&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given these docker images in your local repositories:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt; REPOSITORIES               TAG
 node                       8
 rabbitmq                   3.6.9
 postgres                   9.6.1
 yourregistry.com/node      8
 yourregistry.com/rabbitmq  3.6.9
 yourregistry.com/postgres  9.6.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tag &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;postgres&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;yourregistry.com&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt; ./transfer_images.sh -d yourregistry.com -m node,postgres&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tag &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;rabbitmq&lt;/code&gt; tagged with &lt;code class=&quot;language-text&quot;&gt;yourregistry.com&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;yourotherregistry.com&lt;/code&gt; and then push it&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt; ./transfer_images.sh -s yourregistry.com -d yourotherregistry.com -m node,rabbitmq -p&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Wrapping this up&lt;/h3&gt;
&lt;p&gt;So there you have it, my fancy transfer images script. I hope it will help
some of you guys/gals that face the same problem as I did. I’ll write
more scripts if I encounter more repetitive and/or tedious tasks.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Monitor Hotplug for Linux]]></title><description><![CDATA[
I finally managed to write a `udev` rule that executes my `xrandr` script
when plugging an external monitor for my work laptop. I've tried to write
this script so many times before, but failed to make it work. I'm not sure
if it's because my setup at the time supported it very well, or if I
just wasn't motivated enough to make it work.

]]></description><link>https://www.nasvillanueva.com/monitor-hotplug/</link><guid isPermaLink="false">https://www.nasvillanueva.com/monitor-hotplug/</guid><pubDate>Mon, 12 Jun 2017 15:05:00 GMT</pubDate><content:encoded>&lt;p&gt;I finally managed to write a &lt;code class=&quot;language-text&quot;&gt;udev&lt;/code&gt; rule that executes my &lt;code class=&quot;language-text&quot;&gt;xrandr&lt;/code&gt; script
when plugging an external monitor for my work laptop. I’ve tried to write
this script so many times before, but failed to make it work. I’m not sure
if it’s because my setup at the time supported it very well, or if I
just wasn’t motivated enough to make it work.&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;p&gt;After listening to the &lt;a href=&quot;https://nixers.net&quot;&gt;Nixers&lt;/a&gt; &lt;a href=&quot;https://podcast.nixers.net/feed&quot;&gt;Podcast&lt;/a&gt;, for
some unknown reason, I was motivated to write one that actually works.&lt;/p&gt;
&lt;p&gt;Here’s my &lt;code class=&quot;language-text&quot;&gt;/etc/udev/rules.d/99-monitor-hotplug.rules&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;KERNEL&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;card0&quot;&lt;/span&gt;, SUBSYSTEM&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;drm&quot;&lt;/span&gt;, ENV&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;DISPLAY&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:0&quot;&lt;/span&gt;, ENV&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;XAUTHORITY&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home/jvillanueva/.Xauthority&quot;&lt;/span&gt;, RUN+&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home/jvillanueva/.bin/hotplug.sh&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and here’s my &lt;code class=&quot;language-text&quot;&gt;hotplug.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;export&lt;/span&gt; DISPLAY&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;:0
&lt;span class=&quot;token function&quot;&gt;export&lt;/span&gt; XAUTHORITY&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/jvillanueva/.Xauthority
MONITOR&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;xrandr &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; connected&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$MONITOR&lt;/span&gt; -eq 1 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    xrandr --output eDP1 --auto
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    xrandr --output eDP1 --auto --output HDMI1 --right-of eDP1 --auto
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt; 5 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh /home/jvillanueva/.bin/wall-e &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After putting everything in place, I reloaded &lt;code class=&quot;language-text&quot;&gt;udev&lt;/code&gt; rules and services
via:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;udevadm control --reload-rules
systemctl restart systemd-udevd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I tried connecting my external monitor and boom, &lt;code class=&quot;language-text&quot;&gt;udev&lt;/code&gt; executed &lt;code class=&quot;language-text&quot;&gt;hotplug.sh&lt;/code&gt;.
Now, all of my monitors are automatically configured everytime I [un]plug my external
monitor. My script also calls another script that [re]sets my wallpaper
using &lt;a href=&quot;https://github.com/nasvillanueva/hsetroot&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;hsetroot&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s my &lt;code class=&quot;language-text&quot;&gt;wall-e&lt;/code&gt; script:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt; /home/jvillanueva/.zshenv
WALL&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$WALLPAPER_PATH&lt;/span&gt;
GRAY_TINT&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#c7c7c7&apos;&lt;/span&gt;
RED_TINT&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#947575&apos;&lt;/span&gt;
hsetroot -screens 3 -fill &lt;span class=&quot;token variable&quot;&gt;$WALL&lt;/span&gt; -tint &lt;span class=&quot;token variable&quot;&gt;$RED_TINT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item></channel></rss>