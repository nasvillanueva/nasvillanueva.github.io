<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[nandemonas]]></title><description><![CDATA[Personal blog of Nas Villanueva]]></description><link>https://www.nasvillanueva.com</link><generator>RSS for Node</generator><lastBuildDate>Fri, 15 Mar 2019 17:07:22 GMT</lastBuildDate><item><title><![CDATA[reset_edge.ps1 — Prevent Karma tests from breaking Microsoft Edge]]></title><description><![CDATA[
Like almost everybody else, we _need to_ test our app in Microsoft Edge, and since we are using <a href="https://angularjs.org/" target="_blank">Angular.js</a> 
it seems that <a href="https://karma-runner.github.io/" target="_blank">Karma</a> + <a href="https://www.npmjs.com/package/karma-edge-launcher" target="_blank">karma-edge-launcher</a> are the best tools to
do that. The problem is, karma-edge-launcher's latest version, 0.8.2 at the time of writing, doesn't <em>gracefully</em> shuts down Edge which makes it restore
all tabs upon next launch. That's why consecutive CI builds floods Edge with tabs until it stops launching and the only way to fix it is to restart the build server.

]]></description><link>https://www.nasvillanueva.com/reset-edge/</link><guid isPermaLink="false">https://www.nasvillanueva.com/reset-edge/</guid><pubDate>Fri, 15 Mar 2019 14:56:50 GMT</pubDate><content:encoded>&lt;p&gt;Like almost everybody else, we &lt;em&gt;need to&lt;/em&gt; test our app in Microsoft Edge, and since we are using &lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot;&gt;Angular.js&lt;/a&gt;
it seems that &lt;a href=&quot;https://karma-runner.github.io/&quot; target=&quot;_blank&quot;&gt;Karma&lt;/a&gt; + &lt;a href=&quot;https://www.npmjs.com/package/karma-edge-launcher&quot; target=&quot;_blank&quot;&gt;karma-edge-launcher&lt;/a&gt; are the best tools to
do that. The problem is, karma-edge-launcher’s latest version, 0.8.2 at the time of writing, doesn’t &lt;em&gt;gracefully&lt;/em&gt; shuts down Edge which makes it restore
all tabs upon next launch. That’s why consecutive CI builds floods Edge with tabs until it stops launching and the only way to fix it is to restart the build server.&lt;/p&gt;
&lt;!--excerpt--&gt; 
&lt;p&gt;Before heading to the solution, I’d like to list down some Github Tickets related to this issue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MicrosoftEdge/edge-launcher/issues/23&quot;&gt;edge-launcher#23&lt;/a&gt;: Edge opens with wrong address&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/karma-runner/karma-edge-launcher/issues/1&quot;&gt;karma-edge-launcher#1&lt;/a&gt;: Error launching Edge on Windows 10 in CI environment (karma, jenkins)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/karma-runner/karma-edge-launcher/issues/4&quot;&gt;karma-edge-launcher#4&lt;/a&gt;: Edge does not close its tabs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nickmccurdy/karma-edge-launcher/pull/33&quot;&gt;karma-edge-launcher#33&lt;/a&gt;: remove /f flag from kill command and call it twice so edge exits cleanly&lt;/li&gt;
&lt;li&gt;and more…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s a lot of tickets being related to each other that’s related to this issue, and even though some of them are already close, no one seems to be able to fix it
or they just gave up.  &lt;/p&gt;
&lt;h2&gt;Initial Solution&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Spoiler Alert&lt;/strong&gt;: It didn’t fix the issue.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I asked a coworker who is knowledgeable about Windows and he gave me this powershell script that sends &lt;code class=&quot;language-text&quot;&gt;Alt+F4&lt;/code&gt; to Edge:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-powershell line-numbers&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$wshell&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ComObject wscript&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shell&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$wshell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AppActivate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Microsoft Edge&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;out-null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Sleep&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$wshell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SendKeys&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%{f4}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script works &lt;strong&gt;IF&lt;/strong&gt; Edge still runs when it is executed. Unfortunately, the problem was Edge can’t launch anymore and karma-edge-launcher makes sure that
it is &lt;em&gt;ungracefully&lt;/em&gt; killed. &lt;/p&gt;
&lt;h2&gt;Actual Solution&lt;/h2&gt;
&lt;p&gt;While trying too look for a solution, I saw articles about Edge being broken and how to fix it by resetting it to a fresh state.
So I thought &lt;em&gt;“What if we can use the same method before each test to clear all restored tabs”&lt;/em&gt;, then I’ve come up with this powershell script
based on what I’ve read.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-powershell line-numbers&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$MicrosoftEdgePath&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Join-Path&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$ENV&lt;/span&gt;:APPDATA &lt;span class=&quot;token string&quot;&gt;&quot;..\Local\Packages\Microsoft.MicrosoftEdge_8wekyb3d8bbwe&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Resolve &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ErrorAction SilentlyContinue
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$MicrosoftEdgePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Take Ownership of Edge&apos;s data folder&lt;/span&gt;
    takeown &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;F &lt;span class=&quot;token variable&quot;&gt;$MicrosoftEdgePath&lt;/span&gt;\&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;R &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;A
    icacls &lt;span class=&quot;token variable&quot;&gt;$MicrosoftEdgePath&lt;/span&gt;\&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;T &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;grant administrators:F
    &lt;span class=&quot;token comment&quot;&gt;# Delete Edge&apos;s data folder starting from the inner most file&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token variable&quot;&gt;$MicrosoftEdgePath&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;Sort-Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Property FullName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Descending &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;Remove-Item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force
    &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$MicrosoftEdgePath&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Re-setup Edge&lt;/span&gt;
Get&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AppXPackage &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AllUsers &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MicrosoftEdge &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;Foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            Add&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AppxPackage &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;DisableDevelopmentMode &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Register &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InstallLocation &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;\AppXManifest.xml&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Verbose
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we don’t need to restart the server manually every time Karma breaks Edge. 😎&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/34636812&quot;&gt;https://stackoverflow.com/a/34636812&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.groovypost.com/howto/reset-microsoft-edge-default-settings/&quot;&gt;https://www.groovypost.com/howto/reset-microsoft-edge-default-settings/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apeswithcomputers.com/article/take-ownership-with-the-command-prompt-powershell&quot;&gt;https://www.apeswithcomputers.com/article/take-ownership-with-the-command-prompt-powershell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL: Lodash's constant is constant]]></title><description><![CDATA[I was working on something that made me produce something like this: Note : This is a dumbed out version of the actual code.   When I tried…]]></description><link>https://www.nasvillanueva.com/til-lodash-constant-is-constant/</link><guid isPermaLink="false">https://www.nasvillanueva.com/til-lodash-constant-is-constant/</guid><pubDate>Wed, 16 Jan 2019 03:51:42 GMT</pubDate><content:encoded>&lt;p&gt;I was working on something that made me produce something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        key&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transformedObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrayOfObjects&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keyBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        someKey&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformedObject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Prints out:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//     a: {&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//         someKey: null&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//     },&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//     b: {&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//         someKey: null&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//     }&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// }&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is a dumbed out version of the actual code.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;When I tried updating one of the properties’ &lt;code class=&quot;language-text&quot;&gt;someKey&lt;/code&gt; attribute, I expected it to just modify that particular attribute. Instead, it modified all &lt;code class=&quot;language-text&quot;&gt;someKey&lt;/code&gt; attribute of &lt;strong&gt;all&lt;/strong&gt; the properties.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;transformedObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;someKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;new value&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformedObject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Prints out:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//     a: {&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//         someKey: &apos;new value&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//     },&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//     b: {&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//         someKey: &apos;new value&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//     }&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// }&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turns out that, Lodash’s &lt;code class=&quot;language-text&quot;&gt;_.constant&lt;/code&gt; is actually &lt;em&gt;constant&lt;/em&gt;. It returned the same instance of the value passed onto it. It took me about an hour to realize what just happened. 🤦️&lt;/p&gt;</content:encoded></item><item><title><![CDATA[gifify.sh — Convert Videos to GIFs]]></title><description><![CDATA[
At work, we use a service called Assembla, a service like Github. Sometimes, to make our tickets more understandable, we include screenshots or screencasts. But the problem is, on Assembla, they don't have an embedded video player
for the screencast we upload, even when it's in a web compatible format. So I created this script.

]]></description><link>https://www.nasvillanueva.com/gifify/</link><guid isPermaLink="false">https://www.nasvillanueva.com/gifify/</guid><pubDate>Mon, 15 Oct 2018 06:34:39 GMT</pubDate><content:encoded>&lt;p&gt;At work, we use a service called Assembla, a service like Github. Sometimes, to make our tickets more understandable, we include screenshots or screencasts. But the problem is, on Assembla, they don’t have an embedded video player
for the screencast we upload, even when it’s in a web compatible format. So I created this script.&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;h1&gt;The Script (not the band)&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gifify.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

TEMP_DIR&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;mktemp -d $TMPDIR/gifify.$RANDOM&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

ffmpeg -i &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; -r 5 &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;/frames-%03d.jpg&quot;&lt;/span&gt;

FILENAME&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;basename&lt;/span&gt; $1&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

convert -delay 20 -loop 0 &lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;/frames-*.jpg &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${FILENAME%%.*}&lt;/span&gt;.gif&quot;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf &lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before being able to run this script, you’d have to have these tools installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ffmpeg.org&quot;&gt;ffmpeg&lt;/a&gt; - for slicing your video into images; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; - for combining your slices of images into a GIF.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Let’s dissect &lt;code class=&quot;language-text&quot;&gt;line 5&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ffmpeg                      &lt;span class=&quot;token comment&quot;&gt;# Call ffmpeg.&lt;/span&gt;
    -i &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;# Pass script first argumen as input file.&lt;/span&gt;
    -r 5                    &lt;span class=&quot;token comment&quot;&gt;# Set framerate to 5.&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;/frames-%03d.jpg&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# Tell ffmpeg where to put the slices,&lt;/span&gt;
                            &lt;span class=&quot;token comment&quot;&gt;# with a filename template.&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;And &lt;code class=&quot;language-text&quot;&gt;line 9&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-bash line-numbers&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;convert                     &lt;span class=&quot;token comment&quot;&gt;# Call ImageMagick convert.&lt;/span&gt;
    -delay 20               &lt;span class=&quot;token comment&quot;&gt;# Delay before the next image shows.&lt;/span&gt;
    -loop 0                 &lt;span class=&quot;token comment&quot;&gt;# Set loop to infinite.&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$TEMP_DIR&lt;/span&gt;/frames-*.jpg  &lt;span class=&quot;token comment&quot;&gt;# Tell ImageMagick where the slices are.&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${FILENAME%%.*}&lt;/span&gt;.gif&quot;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;# Tell ImageMagick the output filename,&lt;/span&gt;
                            &lt;span class=&quot;token comment&quot;&gt;# replacing the original extension to .gif&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;I am, by no means, an advanced user of ffmpeg nor ImageMagick, that’s why I only used minimal options for each tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Running the script&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gifify.sh ./sample.mov&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will produce a GIF file with the same filename as the input.&lt;/p&gt;
&lt;h1&gt;Demo&lt;/h1&gt;
&lt;p&gt;Here’s a screencast I recorded using Quicktime. &lt;code class=&quot;language-text&quot;&gt;sample.mov&lt;/code&gt;&lt;/p&gt;
&lt;video width=&quot;100%&quot; height=&quot;auto&quot; controls&gt;
    &lt;source src=&quot;/sample-49d931fb81bdacb2c6e2dd5744e5f3ea.mov&quot;&gt;
    Your browser does not support the video tag.
&lt;/video&gt;
&lt;br&gt;
&lt;p&gt;Here’s a &lt;em&gt;gifified&lt;/em&gt; file. &lt;code class=&quot;language-text&quot;&gt;sample.gif&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/sample-9ffcc51955357da363364e414f6f112c.gif&quot; alt=&quot;sample.gif&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Now, it’s easier to embed a screencastª, albeit fake, on Assembla (or even Github, GitLab, etc.)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Migrating Docker Images]]></title><description><![CDATA[
Do you run your own Docker Registry server? Ever got tired of tagging
all your images with the registry URL and pushing them one by one? Well,
we do and it is very exhausting when you keep doing it again and again. So
I came up with this script.

]]></description><link>https://www.nasvillanueva.com/migrating-docker-images/</link><guid isPermaLink="false">https://www.nasvillanueva.com/migrating-docker-images/</guid><pubDate>Fri, 11 Aug 2017 12:55:00 GMT</pubDate><content:encoded>&lt;p&gt;Do you run your own Docker Registry server? Ever got tired of tagging
all your images with the registry URL and pushing them one by one? Well,
we do and it is very exhausting when you keep doing it again and again. So
I came up with this script.&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I was at a different company when I created this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;We’re developing an enterprise software for a client with a microservices
architecture that utilizes &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; containers and &lt;a href=&quot;https://dcos.io/&quot;&gt;DC/OS&lt;/a&gt;
orchestration.&lt;/p&gt;
&lt;h3&gt;Our Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dozens of microservices built with &lt;a href=&quot;https://spring.io/&quot;&gt;Spring Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microservices runs on &lt;a href=&quot;https://dcos.io/&quot;&gt;DC/OS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Few environments (development, staging, production) each having their
own registry.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the things you might ask me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Why the f*** do you have more than one registry?”&lt;/em&gt;&lt;/strong&gt;
Production was intended to have its own registry since it doesn’t have
any access to the internet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Why not use a third party private docker registry?”&lt;/em&gt;&lt;/strong&gt;
Production servers doesn’t have any internet access (most of the app
is meant to be access via VPN)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Why not use &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; or some other in-premise CI/CD that
can automatically tag and push your images to your different
envirnments?”&lt;/em&gt;&lt;/strong&gt;
Actually, I’m not so sure because I’ve heard other companies use CI/CD
from development -&gt; production. Maybe the client doesn’t want CI/CD in
the production environment. I really don’t have any idea regarding this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Problem&lt;/h3&gt;
&lt;p&gt;It is a pain in the arse when you need to manually tag and push all your
images from one registry to another, whether it may come from your local
machine or one of your registry servers.&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;I’ve written a &lt;a href=&quot;https://github.com/nasvillanueva/scripts/blob/master/transfer_images.sh&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;transfer_images.sh&lt;/code&gt;&lt;/a&gt; found on my
&lt;a href=&quot;https://github.com/nasvillanueva/scripts&quot;&gt;scripts repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt; ./transfer_images.sh &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-s source&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; -d destination -m matcher&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;,matcher2,matcher3&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-p&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 where:
    -h print usage
    -s &lt;span class=&quot;token function&quot;&gt;source&lt;/span&gt; registry &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;optional&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        example: registry.hub.docker.com
    -d destination registry &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        example: registry.mydomain.com
    -m matchers &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        all the images that will be tagged with the destination
        example nodejs,jenkins,chronos
    -p push images &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;optional&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        push all tagged images&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given these docker images in your local repositories:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt; REPOSITORIES               TAG
 node                       8
 rabbitmq                   3.6.9
 postgres                   9.6.1
 yourregistry.com/node      8
 yourregistry.com/rabbitmq  3.6.9
 yourregistry.com/postgres  9.6.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tag &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;postgres&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;yourregistry.com&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt; ./transfer_images.sh -d yourregistry.com -m node,postgres&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tag &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;rabbitmq&lt;/code&gt; tagged with &lt;code class=&quot;language-text&quot;&gt;yourregistry.com&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;yourotherregistry.com&lt;/code&gt; and then push it&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt; ./transfer_images.sh -s yourregistry.com -d yourotherregistry.com -m node,rabbitmq -p&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Wrapping this up&lt;/h3&gt;
&lt;p&gt;So there you have it, my fancy transfer images script. I hope it will help
some of you guys/gals that face the same problem as I did. I’ll write
more scripts if I encounter more repetitive and/or tedious tasks.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Monitor Hotplug for Linux]]></title><description><![CDATA[
I finally managed to write a `udev` rule that executes my `xrandr` script
when plugging an external monitor for my work laptop. I've tried to write
this script so many times before, but failed to make it work. I'm not sure
if it's because my setup at the time supported it very well, or if I
just wasn't motivated enough to make it work.

]]></description><link>https://www.nasvillanueva.com/monitor-hotplug/</link><guid isPermaLink="false">https://www.nasvillanueva.com/monitor-hotplug/</guid><pubDate>Mon, 12 Jun 2017 15:05:00 GMT</pubDate><content:encoded>&lt;p&gt;I finally managed to write a &lt;code class=&quot;language-text&quot;&gt;udev&lt;/code&gt; rule that executes my &lt;code class=&quot;language-text&quot;&gt;xrandr&lt;/code&gt; script
when plugging an external monitor for my work laptop. I’ve tried to write
this script so many times before, but failed to make it work. I’m not sure
if it’s because my setup at the time supported it very well, or if I
just wasn’t motivated enough to make it work.&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;p&gt;After listening to the &lt;a href=&quot;https://nixers.net&quot;&gt;Nixers&lt;/a&gt; &lt;a href=&quot;https://podcast.nixers.net/feed&quot;&gt;Podcast&lt;/a&gt;, for
some unknown reason, I was motivated to write one that actually works.&lt;/p&gt;
&lt;p&gt;Here’s my &lt;code class=&quot;language-text&quot;&gt;/etc/udev/rules.d/99-monitor-hotplug.rules&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;KERNEL&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;card0&quot;&lt;/span&gt;, SUBSYSTEM&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;drm&quot;&lt;/span&gt;, ENV&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;DISPLAY&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:0&quot;&lt;/span&gt;, ENV&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;XAUTHORITY&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home/jvillanueva/.Xauthority&quot;&lt;/span&gt;, RUN+&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home/jvillanueva/.bin/hotplug.sh&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and here’s my &lt;code class=&quot;language-text&quot;&gt;hotplug.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;export&lt;/span&gt; DISPLAY&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;:0
&lt;span class=&quot;token function&quot;&gt;export&lt;/span&gt; XAUTHORITY&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/jvillanueva/.Xauthority
MONITOR&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;xrandr &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; connected&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$MONITOR&lt;/span&gt; -eq 1 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    xrandr --output eDP1 --auto
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    xrandr --output eDP1 --auto --output HDMI1 --right-of eDP1 --auto
&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt; 5 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh /home/jvillanueva/.bin/wall-e &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After putting everything in place, I reloaded &lt;code class=&quot;language-text&quot;&gt;udev&lt;/code&gt; rules and services
via:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;udevadm control --reload-rules
systemctl restart systemd-udevd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I tried connecting my external monitor and boom, &lt;code class=&quot;language-text&quot;&gt;udev&lt;/code&gt; executed &lt;code class=&quot;language-text&quot;&gt;hotplug.sh&lt;/code&gt;.
Now, all of my monitors are automatically configured everytime I [un]plug my external
monitor. My script also calls another script that [re]sets my wallpaper
using &lt;a href=&quot;https://github.com/nasvillanueva/hsetroot&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;hsetroot&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s my &lt;code class=&quot;language-text&quot;&gt;wall-e&lt;/code&gt; script:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;.&lt;/span&gt; /home/jvillanueva/.zshenv
WALL&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$WALLPAPER_PATH&lt;/span&gt;
GRAY_TINT&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#c7c7c7&apos;&lt;/span&gt;
RED_TINT&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#947575&apos;&lt;/span&gt;
hsetroot -screens 3 -fill &lt;span class=&quot;token variable&quot;&gt;$WALL&lt;/span&gt; -tint &lt;span class=&quot;token variable&quot;&gt;$RED_TINT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item></channel></rss>