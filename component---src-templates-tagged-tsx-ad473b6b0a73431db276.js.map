{"version":3,"file":"component---src-templates-tagged-tsx-ad473b6b0a73431db276.js","mappings":"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","sources":["webpack://nasvillanueva.github.io/./src/components/DevLayout.tsx","webpack://nasvillanueva.github.io/./src/components/DevPost.tsx","webpack://nasvillanueva.github.io/./src/templates/tagged.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport Layout from \"@components/Layout\";\nimport { GatsbyImage, getImage, ImageDataLike, StaticImage } from \"gatsby-plugin-image\";\nimport { Link, navigate } from \"gatsby\";\nimport type { Post } from \"@@types/dev\";\nimport DevPost from \"./DevPost\";\n\nconst DevLayout = ({\n  posts,\n  tags,\n  currentTag\n}: {\n  posts: Post[],\n  tags: {\n    group: {\n      tag: string;\n    }[]\n  },\n  currentTag?: string;\n}) => {\n\n  const tagList = tags.group.map(({ tag }) => tag).sort();\n\n  const goToTagPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const newTag = event.target.value;\n\n    if (newTag === \"\") {\n      navigate(\"/dev\");\n    }\n\n    if (tagList.includes(newTag)) {\n      navigate(`/dev/tagged/${newTag}`);\n    }\n  }\n\n  return (\n    <Layout>\n      <div className=\"container\">\n        <div className=\"flex justify-between items-center mb-10\">\n          <div>\n            <h1 className=\"text-4xl font-serif font-medium mb-5\">\n              Dev Blog\n              { currentTag != null ? <span className=\"text-zinc-500\"> | {currentTag}</span> : null }\n            </h1>\n            <div className=\"border-b-[2px] w-1/4\"></div>\n          </div>\n\n          <select className=\"mb-5\" onChange={goToTagPage} value={currentTag}>\n            <option value=\"\">All Categories</option>\n            {tagList.map((tag, index) => (<option key={index} value={tag}>{tag}</option>))}\n          </select>\n        </div>\n        <div className=\"grid grid-flow-row sm:grid-cols-1 lg:grid-cols-3 md:grid-cols-2 gap-x-5 gap-y-20\">\n        { posts.map((post, index) => (<DevPost post={post} key={index} />)) }\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nDevLayout.propTypes = {\n  posts: PropTypes.array,\n  tags: PropTypes.object,\n  currentTag: PropTypes.string\n};\n\nexport default DevLayout;\n","import React from \"react\";\nimport type { Post } from \"@@types/dev\";\nimport { GatsbyImage, getImage, StaticImage } from \"gatsby-plugin-image\";\nimport * as PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\n\nconst DevPost = ({ post }: { post: Post }) => {\n  const postTitle = post.frontmatter.title;\n  const banner = getImage(post.frontmatter.banner ?? null);\n  const tags = post.frontmatter.tags ?? []\n\n  return (\n    <div>\n      <Link className=\"font-serif block no-underline mb-5\" to={post.fields.slug}>\n        <div className=\"shadow-lg shadow-nxs-blue/50\">\n          {banner != null\n            ? <GatsbyImage image={banner} alt={postTitle} />\n            : <StaticImage placeholder=\"blurred\" aspectRatio={16/9} src=\"../images/default-dev-banner.jpg\" alt={postTitle}></StaticImage>\n          }\n        </div>\n\n        <p className=\"mt-6 text-xl font-medium\">{postTitle}</p>\n      </Link>\n\n      <div className=\"mt-6 text-slate-500 text-[0.7rem] flex justify-between\">\n        <span>{post.frontmatter.date}</span>\n        <span>{post.fields.readingTime.text}</span>\n      </div>\n\n      {tags.length > 0\n        ? <div className=\"mt-3 tags\">\n          {tags.map((tag, index) => (\n            <Link className=\"tag\" key={index} to={`/dev/tagged/${tag}`}>{tag}</Link>\n          ))}\n        </div>\n        : null\n      }\n    </div>\n  );\n}\n\nDevPost.propTypes = {\n  post: PropTypes.object\n};\n\nexport default DevPost;\n","import * as React from \"react\";\nimport { graphql, HeadFC } from \"gatsby\";\nimport DevLayout from \"@components/DevLayout\";\nimport HeadComponent from \"@components/Head\";\nimport type { Post, Tag } from \"@@types/dev-layout\";\n\nexport default function Tagged({ data: { tags, allMarkdownRemark: { nodes: posts } }, pageContext: { currentTag } }: {\n  data: {\n    tags: {\n      group: Tag[]\n    },\n    allMarkdownRemark: {\n      nodes: Post[]\n    }\n  },\n  pageContext: {\n    currentTag: string;\n  }\n}) {\n\n  return (\n    <DevLayout posts={posts} tags={tags} currentTag={currentTag} />\n  )\n}\n\nexport const Head: HeadFC = (props: any) => {\n  const pageTitle = props.pageContext.currentTag;\n\n  return <HeadComponent headProps={props} pageTitle={pageTitle} />\n}\n\nexport const pageQuery = graphql`\n  query ($currentTag: String) {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n    tags: allMarkdownRemark {\n      group(field: frontmatter___tags) {\n        tag: fieldValue\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { site: { eq: \"dev\" } }, frontmatter: { tags: { eq: $currentTag } } }\n    ) {\n      nodes {\n        fields {\n          slug\n          readingTime {\n            text\n          }\n        }\n        frontmatter {\n          title\n          date(formatString: \"YYYY-MM-DD\")\n          tags\n          banner {\n            childImageSharp {\n              gatsbyImageData(\n                placeholder: BLURRED\n                layout: FULL_WIDTH\n                aspectRatio: 1.77777778\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["posts","tags","currentTag","tagList","group","map","tag","sort","React","Layout","className","onChange","event","newTag","target","value","navigate","includes","index","key","post","DevPost","postTitle","frontmatter","title","banner","getImage","Link","to","fields","slug","GatsbyImage","image","alt","StaticImage","placeholder","aspectRatio","src","date","readingTime","text","length","Tagged","data","allMarkdownRemark","nodes","pageContext","DevLayout","Head","props","pageTitle","HeadComponent","headProps"],"sourceRoot":""}