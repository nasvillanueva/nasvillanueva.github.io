{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/dev/gifify","result":{"data":{"site":{"siteMetadata":{"title":"nandemonas","author":"Nas Villanueva"}},"post":{"id":"1b30b047-f579-5498-b5bc-daa8e0bcecd5","html":"<p>At work, we use a service called Assembla, a service like Github. Sometimes, to make our tickets more understandable, we include screenshots or screencasts. But the problem is, on Assembla, they don’t have an embedded video player\nfor the screencast we upload, even when it’s in a web compatible format. So I created this script.</p>\n<!--excerpt-->\n<h1>The Script (not the band)</h1>\n<p><code class=\"language-text\">gifify.sh</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber 0\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token assign-left variable\">TEMP_DIR</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp <span class=\"token parameter variable\">-d</span> $TMPDIR/gifify.<span class=\"token environment constant\">$RANDOM</span><span class=\"token variable\">)</span></span>\n\nffmpeg <span class=\"token parameter variable\">-i</span> <span class=\"token variable\">$1</span> <span class=\"token parameter variable\">-r</span> <span class=\"token number\">5</span> <span class=\"token string\">\"<span class=\"token variable\">$TEMP_DIR</span>/frames-%03d.jpg\"</span>\n\n<span class=\"token assign-left variable\">FILENAME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $1<span class=\"token variable\">)</span></span>\n\nconvert <span class=\"token parameter variable\">-delay</span> <span class=\"token number\">20</span> <span class=\"token parameter variable\">-loop</span> <span class=\"token number\">0</span> <span class=\"token variable\">$TEMP_DIR</span>/frames-*.jpg <span class=\"token string\">\"<span class=\"token variable\">${FILENAME<span class=\"token operator\">%%</span>.*}</span>.gif\"</span>\n\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token variable\">$TEMP_DIR</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Before being able to run this script, you’d have to have these tools installed:</p>\n<ul>\n<li><a href=\"https://www.ffmpeg.org\">ffmpeg</a> - for slicing your video into images; and</li>\n<li><a href=\"https://www.imagemagick.org\">ImageMagick</a> - for combining your slices of images into a GIF.</li>\n</ul>\n<h3>Let’s dissect <code class=\"language-text\">line 5</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber 0\" class=\"language-bash line-numbers\"><code class=\"language-bash\">ffmpeg                      <span class=\"token comment\"># Call ffmpeg.</span>\n    <span class=\"token parameter variable\">-i</span> <span class=\"token variable\">$1</span>                   <span class=\"token comment\"># Pass script first argumen as input file.</span>\n    <span class=\"token parameter variable\">-r</span> <span class=\"token number\">5</span>                    <span class=\"token comment\"># Set framerate to 5.</span>\n<span class=\"token string\">\"<span class=\"token variable\">$TEMP_DIR</span>/frames-%03d.jpg\"</span> <span class=\"token comment\"># Tell ffmpeg where to put the slices,</span>\n                            <span class=\"token comment\"># with a filename template.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>And <code class=\"language-text\">line 9</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber 0\" class=\"language-bash line-numbers\"><code class=\"language-bash\">convert                     <span class=\"token comment\"># Call ImageMagick convert.</span>\n    <span class=\"token parameter variable\">-delay</span> <span class=\"token number\">20</span>               <span class=\"token comment\"># Delay before the next image shows.</span>\n    <span class=\"token parameter variable\">-loop</span> <span class=\"token number\">0</span>                 <span class=\"token comment\"># Set loop to infinite.</span>\n    <span class=\"token variable\">$TEMP_DIR</span>/frames-*.jpg  <span class=\"token comment\"># Tell ImageMagick where the slices are.</span>\n    <span class=\"token string\">\"<span class=\"token variable\">${FILENAME<span class=\"token operator\">%%</span>.*}</span>.gif\"</span>   <span class=\"token comment\"># Tell ImageMagick the output filename,</span>\n                            <span class=\"token comment\"># replacing the original extension to .gif</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<blockquote>\n<p>I am, by no means, an advanced user of ffmpeg nor ImageMagick, that’s why I only used minimal options for each tool.</p>\n</blockquote>\n<h1>Running the script</h1>\n<p><code class=\"language-text\">gifify.sh ./sample.mov</code></p>\n<p>This will produce a GIF file with the same filename as the input.</p>\n<h1>Demo</h1>\n<p>Here’s a screencast I recorded using Quicktime. <code class=\"language-text\">sample.mov</code></p>\n<video width=\"100%\" height=\"auto\" controls>\n    <source src=\"/49d931fb81bdacb2c6e2dd5744e5f3ea/sample.mov\">\n    Your browser does not support the video tag.\n</video>\n<br>\n<p>Here’s a <em>gifified</em> file. <code class=\"language-text\">sample.gif</code></p>\n<p><img src=\"/9ffcc51955357da363364e414f6f112c/sample.gif\" alt=\"sample.gif\"></p>\n<br>\n<p>Now, it’s easier to embed a screencastª, albeit fake, on Assembla (or even Github, GitLab, etc.)</p>","frontmatter":{"title":"gifify.sh — Convert Videos to GIFs","date":"2018-10-15","tags":["Scripts","Shell","Bash"]}},"relatedPosts":{"nodes":[{"frontmatter":{"tags":["Scripts","Docker","Shell","DevOps"],"date":"2017-08-11","title":"Migrating Docker Images"},"fields":{"readingTime":{"text":"3 min read"},"site":"dev","slug":"/dev/migrating-docker-images"}},{"frontmatter":{"tags":["Scripts","Bash","Shell"],"date":"2017-06-12","title":"Monitor Hotplug for Linux"},"fields":{"readingTime":{"text":"2 min read"},"site":"dev","slug":"/dev/monitor-hotplug"}},{"frontmatter":{"tags":["Scripts","Powershell","DevOps"],"date":"2019-03-15","title":"reset_edge.ps1 — Prevent Karma tests from breaking Microsoft Edge"},"fields":{"readingTime":{"text":"3 min read"},"site":"dev","slug":"/dev/reset-edge"}}]}},"pageContext":{"slug":"/dev/gifify","tags":["Scripts","Shell","Bash"]}},"staticQueryHashes":[]}